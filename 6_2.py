class Vehicle:
    """
    Базовый класс транспорта.
    """

    # Атрибут класса: допустимые варианты цветов для перекраски
    __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']

    def __init__(self, owner: str, model: str, color: str, engine_power: int):
        """
        Инициализация транспортного средства.

        Args:
            owner (str): Владелец транспорта.
            model (str): Модель транспорта.
            color (str): Цвет транспорта.
            engine_power (int): Мощность двигателя (в лошадиных силах).
        """
        self.owner = owner  # Владелец может изменяться
        self.__model = model  # Модель устанавливается один раз и не изменяется
        self.__engine_power = engine_power  # Мощность двигателя тоже неизменяема
        self.__color = color  # Цвет можно менять только через метод set_color

    # Геттер для получения модели транспорта
    def get_model(self) -> str:
        """
        Возвращает модель транспорта.

        Returns:
            str: Описание модели транспорта.
        """
        return f"Модель: {self.__model}"

    # Геттер для получения мощности двигателя
    def get_horsepower(self) -> str:
        """
        Возвращает мощность двигателя.

        Returns:
            str: Описание мощности двигателя.
        """
        return f"Мощность двигателя: {self.__engine_power}"

    # Геттер для получения текущего цвета транспорта
    def get_color(self) -> str:
        """
        Возвращает текущий цвет транспорта.

        Returns:
            str: Описание цвета транспорта.
        """
        return f"Цвет: {self.__color}"

    # Метод для вывода всей информации о транспортном средстве
    def print_info(self):
        """
        Распечатывает информацию о транспортном средстве:
        модель, мощность двигателя, цвет и владельца.
        """
        print(self.get_model())
        print(self.get_horsepower())
        print(self.get_color())
        print(f"Владелец: {self.owner}")

    # Сеттер для изменения цвета транспорта
    def set_color(self, new_color: str):
        """
        Изменяет цвет транспорта, если новый цвет разрешен.

        Args:
            new_color (str): Новый цвет транспорта.
        """
        # Приводим цвет к нижнему регистру для проверки
        if new_color.lower() in (color.lower() for color in self.__COLOR_VARIANTS):
            self.__color = new_color  # Меняем цвет
        else:
            # Если цвет не разрешен, выводим сообщение
            print(f"Нельзя сменить цвет на {new_color}")


class Sedan(Vehicle):
    """
    Класс седана, наследник Vehicle.
    """

    # Константное значение: ограничение количества пассажиров
    __PASSENGERS_LIMIT = 5

    def __init__(self, owner: str, model: str, color: str, engine_power: int):
        """
        Инициализация седана.

        Args:
            owner (str): Владелец транспорта.
            model (str): Модель транспорта.
            color (str): Цвет транспорта.
            engine_power (int): Мощность двигателя (в лошадиных силах).
        """
        # Вызываем инициализацию базового класса
        super().__init__(owner, model, color, engine_power)


# Проверяем работу программы

# Создаем объект класса Sedan
vehicle1 = Sedan('Fedos', 'Toyota Mark II', 'blue', 500)

# Печатаем начальную информацию о транспортном средстве
vehicle1.print_info()

# Пробуем изменить цвет на неразрешенный
vehicle1.set_color('Pink')  # Ожидается: сообщение об ошибке

# Пробуем изменить цвет на разрешенный
vehicle1.set_color('BLACK')  # Ожидается: успешное изменение цвета

# Меняем владельца
vehicle1.owner = 'Vasyok'

# Проверяем обновленные свойства
vehicle1.print_info()


''' Объяснение кода:
1. Сокрытие атрибутов:

    Атрибуты __model, __engine_power, и __color скрыты (__ перед именем). Это предотвращает их прямое изменение извне.
    Используем геттеры (get_model, get_horsepower, get_color) для доступа к этим атрибутам.

2. Атрибуты класса:

    __COLOR_VARIANTS — список допустимых цветов, общий для всех объектов Vehicle. Он доступен внутри класса через self.

3. Метод set_color:

    Проверяет, принадлежит ли новый цвет списку разрешенных цветов.
    Если нет, выводится сообщение, что цвет изменить нельзя.

4. Наследование:

    Sedan наследует свойства и методы от Vehicle.
    Атрибут __PASSENGERS_LIMIT добавлен как особенность седана.

5. Создание и проверка:

    Создан объект класса Sedan и проверена работа методов и ограничений.
    Владелец транспортного средства может изменяться напрямую, в отличие от скрытых атрибутов.'''