# Родительский класс Animal, представляет всех животных
class Animal:
    def __init__(self, name):
        """
        Инициализация животного.
        :param name: имя животного
        """
        self.name = name  # Уникальное имя животного
        self.alive = True  # Атрибут, показывающий, что животное живо
        self.fed = False   # Атрибут, показывающий, накормлено ли животное

    def eat(self, food):
        """
        Метод для поедания пищи.
        :param food: объект класса Plant, представляющий растение
        """
        if not self.alive:
            # Если животное уже мертво, оно не может есть
            print(f"{self.name} уже мертв и не может есть.")
            return

        if food.edible:
            # Если растение съедобное, животное ест его и становится накормленным
            print(f"{self.name} съел {food.name}")
            self.fed = True
        else:
            # Если растение несъедобное, животное отказывается есть и погибает
            print(f"{self.name} не стал есть {food.name}")
            self.alive = False

# Родительский класс Plant, представляет все растения
class Plant:
    def __init__(self, name):
        """
        Инициализация растения.
        :param name: имя растения
        """
        self.name = name  # Уникальное имя растения
        self.edible = False  # По умолчанию растение несъедобное

# Класс Mammal, наследующий от Animal
class Mammal(Animal):
    """
    Млекопитающее. Унаследовало все свойства и методы от Animal.
    """
    pass

# Класс Predator, наследующий от Animal
class Predator(Animal):
    """
    Хищник. Унаследовал все свойства и методы от Animal.
    """
    pass

# Класс Flower, наследующий от Plant
class Flower(Plant):
    """
    Цветок. Унаследовал все свойства и методы от Plant.
    """
    pass

# Класс Fruit, наследующий от Plant
class Fruit(Plant):
    def __init__(self, name):
        """
        Инициализация фрукта.
        :param name: имя фрукта
        """
        super().__init__(name)  # Наследуем базовые свойства от Plant
        self.edible = True  # Переопределяем edible, так как фрукт съедобный

# Создаем объекты классов
a1 = Predator('Волк с Уолл-Стрит')  # Хищник
a2 = Mammal('Хатико')               # Млекопитающее
p1 = Flower('Цветик семицветик')    # Несъедобный цветок
p2 = Fruit('Заводной апельсин')     # Съедобный фрукт

# Выводим имена объектов для проверки
print(a1.name)  # Имя хищника
print(p1.name)  # Имя цветка

# Проверяем начальные значения атрибутов
print(a1.alive)  # Жив ли хищник
print(a2.fed)    # Накормлено ли млекопитающее

# Хищник пытается съесть несъедобный цветок
a1.eat(p1)

# Млекопитающее съедает съедобный фрукт
a2.eat(p2)

# Проверяем состояние атрибутов после еды
print(a1.alive)  # Хищник погиб, так как съел несъедобное
print(a2.fed)    # Млекопитающее насытилось


''' Объяснение кода:
1. Родительский класс Animal:

    Содержит общие атрибуты и методы для всех животных: name, alive, и fed.
    Метод eat реализует логику проверки, можно ли животному есть конкретное растение.

2. Родительский класс Plant:

    Содержит общие атрибуты для всех растений: name и edible.
    По умолчанию все растения несъедобные (edible = False).

3. Классы-наследники Mammal и Predator:

    Унаследовали атрибуты и методы от Animal.
    Их функционал одинаков, но можно добавить специфические черты в будущем.

4. Классы-наследники Flower и Fruit:

    Унаследовали атрибуты от Plant.
    У класса Fruit атрибут edible переопределяется, чтобы стать съедобным.

5. Создание объектов и выполнение действий:

    Объекты хищника, млекопитающего, цветка и фрукта создаются с индивидуальными именами.
    Хищник пытается съесть несъедобное растение и погибает.
    Млекопитающее съедает съедобный фрукт и становится сытым.'''